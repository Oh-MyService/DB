name: Deploy MySQL to Amazon Lightsail

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  LIGHTSAIL_INSTANCE_IP: ${{ secrets.LIGHTSAIL_INSTANCE_IP }}
  SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
  SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry-type: public

    - name: Build, tag, and push image to Amazon ECR Public
      id: build-image
      env:
        REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        REGISTRY_ALIAS: d0v2k3o3 # 본인의 alias 입력
        REPOSITORY: ohmyservice_database # 본인의 repository명 입력
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --no-cache -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
        echo "image=$REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Install SSH client
      run: sudo apt-get install -y openssh-client sshpass

    - name: Create deployment script
      run: |
        echo "
        docker pull ${{ steps.build-image.outputs.image }}
        docker stop mysql_container || true
        docker rm mysql_container || true
        docker run -d --name mysql_container -v mysql_data:/var/lib/mysql -p 21212:3306 ${{ steps.build-image.outputs.image }}
        sleep 10
        docker cp /home/${{ secrets.SSH_USERNAME }}/init.sql mysql_container:/docker-entrypoint-initdb.d/
        docker exec -i mysql_container sh -c 'exec mysql -uroot -proot < /docker-entrypoint-initdb.d/init.sql'
        " > deploy_script.sh

    - name: Copy init.sql and deployment script to Lightsail instance
      run: |
        sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -o StrictHostKeyChecking=no ./init.sql ${{ secrets.SSH_USERNAME }}@${{ secrets.LIGHTSAIL_INSTANCE_IP }}:/home/${{ secrets.SSH_USERNAME }}/init.sql
        sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -o StrictHostKeyChecking=no ./deploy_script.sh ${{ secrets.SSH_USERNAME }}@${{ secrets.LIGHTSAIL_INSTANCE_IP }}:/home/${{ secrets.SSH_USERNAME }}/deploy_script.sh

    - name: Run deployment script on Lightsail instance
      run: |
        sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.LIGHTSAIL_INSTANCE_IP }} 'bash /home/${{ secrets.SSH_USERNAME }}/deploy_script.sh'

    - name: Clean up old images on Lightsail
      run: |
        sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.LIGHTSAIL_INSTANCE_IP }} 'sudo docker image prune -f'
